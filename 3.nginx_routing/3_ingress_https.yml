apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: clean
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-nginx # ⭐️ 해당 deployment는 labels.app=nginx인 파드만을 관리하겠다.
  template:
  # 아래 labels.app 부분은 service의 selector 부분과 일치해야하고, 위의 matchLabels 부분과도 일치해야함
    metadata:
      labels:
        app: my-nginx  # ⭐️
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
          - containerPort: 80
          
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: clean
spec: 
# Ingress를 적용하기 위해 Cluster IP로 변경한다.
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80 # 파드의 내부 포트와 일치
  selector:
    app: my-nginx
---
# ingress-controller 설치는 별도 필요
# ingress-controller도 nginx 기반으로 구성돼있다.
# ingress-controller를 설치시에 alb가 생성된다. Ingress 자원과 함께 서비스 라우팅을 수행
# 해당 alb가 엔드포인트가 됨
# 중요!! 아래는 보일러플레이트 (아래는 팀장이 한번만 수행하기. ingress controller(=alb)는 하나만 만들어지면 된다.)
# ingress controller 1개에서 여러개의 ingress로 라우팅한다.
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-nginx-ingress
  namespace: clean
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1 # 첫번째 prefix 제거 후 인그레스로 보냄
spec:
  rules:
  - host: server.clean01.store
    http:
      paths:
      - path: /product-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
      - path: /order-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
---
# 쿠버네티스에서 https 인증서 적용 절차가 들어간다!
# 1. cert-manager 생성
  # 1-1. cert-manager 생성을 위한 cert-manager namespace 생성: kubectl create namespace cert-manager => 한번만 하면 되는 작업이다. 클러스터 내에서인가..?!
  # 1-2. helm 패키지 매니저 설치: 구글 검색 후 다운로드(로컬에 설치!)
  # 1-3. helm repository 추가: helm repo add jetstack https://charts.jetstack.io
  # 1-4. helm repository update: helm repo update
  # 1-5. helm을 통해 cert-manager 설치: helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.5.0 --set installCRDs=true
# 2. ClusterIssuer 생성 => 도메인 마다 만들어져야하므로 모든 팀원이 각자 다 만들면 된다!!
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod # letsencrypt 인증서의 이름
  namespace: clean
spec:
  acme:
  # 인증서 서버 주소. 해당 서버의 리소스를 통해 인증서 발행
    server: https://acme-v02.api.letsencrypt.org/directory
    email: clearrworld@gmail.com # 인증서가 만료되거나 하면 여기로 알림간다!
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
# 3. Certificate 생성
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: clean-com-tls
  namespace: clean
spec:
  secretName: clean-com-tls
  duration: 2160h # 90일
  renewBefore: 360h # 15일 전에 갱신된다.
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: server.clean01.store
  dnsNames:
  - server.clean01.store

---
# Ingress 내용 붙여넣기
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-nginx-ingress
  namespace: clean
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1 # 첫번째 prefix 제거 후 인그레스로 보냄
    cert-manager.io/cluster-issuer: letsencrypt-prod # 이 부분을 추가
spec:
  # 아래 tls 부분을 추가!
  tls:
  - hosts:
    - "server.clean01.store"
    secretName: clean-com-tls
  rules:
  - host: server.clean01.store
    http:
      paths:
      - path: /product-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
      - path: /order-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
